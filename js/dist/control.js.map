{"version":3,"sources":["../src/control.js"],"names":["Control","element","inputNode","querySelector","counterNode","parentNode","counterValueNode","maxLimit","getAttribute","_toggleInvalidClass","value","length","innerHTML","addEventListener","event","target","btnClearNode","classList","remove","add","currentValueLength"],"mappings":"AAAA;;;;;IAMMA,O;;;AACJ,mBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACA,QAAMC,YAAYD,QAAQE,aAAR,CAAsB,mBAAtB,CAAlB;AACA,QAAMC,cAAcH,QAAQI,UAAR,CAAmBF,aAAnB,CAAiC,qBAAjC,CAApB;;AAEA,QAAIC,WAAJ,EAAiB;AACf,UAAME,mBAAmBF,YAAYD,aAAZ,CAA0B,2BAA1B,CAAzB;AACA,UAAMI,WAAWH,YAAYI,YAAZ,CAAyB,YAAzB,CAAjB;;AAEA,WAAKC,mBAAL,CAAyBP,UAAUQ,KAAV,CAAgBC,MAAzC,EAAiDJ,QAAjD;;AACAD,uBAAiBM,SAAjB,GAA6BV,UAAUQ,KAAV,CAAgBC,MAA7C;AAEAT,gBAAUW,gBAAV,CAA2B,OAA3B,EAAoC,UAACC,KAAD,EAAW;AAC7C,cAAKL,mBAAL,CAAyBK,MAAMC,MAAN,CAAaL,KAAb,CAAmBC,MAA5C,EAAoDJ,QAApD;;AACAD,yBAAiBM,SAAjB,GAA6BE,MAAMC,MAAN,CAAaL,KAAb,CAAmBC,MAAhD;AACD,OAHD;AAID;;AAED,QAAIV,QAAQO,YAAR,CAAqB,mBAArB,MAA8C,MAAlD,EAA0D;AACxD,UAAMQ,eAAef,QAAQE,aAAR,CAAsB,kBAAtB,CAArB;AAEAD,gBAAUW,gBAAV,CAA2B,WAA3B,EAAwC,YAAM;AAC5C,YAAIX,UAAUQ,KAAV,CAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BK,uBAAaC,SAAb,CAAuBC,MAAvB,CAA8B,QAA9B;AACD,SAFD,MAEO;AACLF,uBAAaC,SAAb,CAAuBE,GAAvB,CAA2B,QAA3B;AACD;AACF,OAND;AAQAH,mBAAaH,gBAAb,CAA8B,OAA9B,EAAuC,YAAM;AAC3CX,kBAAUQ,KAAV,GAAkB,EAAlB;AACAM,qBAAaC,SAAb,CAAuBE,GAAvB,CAA2B,QAA3B;AACD,OAHD;AAID;AACF;;;;SAEDV,mB,gCAAoBW,kB,EAAoBb,Q,EAAU;AAChD,QAAIa,qBAAqBb,QAAzB,EAAmC;AACjC,WAAKN,OAAL,CAAagB,SAAb,CAAuBE,GAAvB,CAA2B,YAA3B;AACD,KAFD,MAEO;AACL,WAAKlB,OAAL,CAAagB,SAAb,CAAuBC,MAAvB,CAA8B,YAA9B;AACD;AACF,G","file":"control.js","sourcesContent":["/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Control {\n  constructor(element) {\n    this.element = element\n    const inputNode = element.querySelector('[data-role=input]')\n    const counterNode = element.parentNode.querySelector('[data-role=counter]')\n\n    if (counterNode) {\n      const counterValueNode = counterNode.querySelector('[data-role=counter-value]')\n      const maxLimit = counterNode.getAttribute('data-limit')\n\n      this._toggleInvalidClass(inputNode.value.length, maxLimit)\n      counterValueNode.innerHTML = inputNode.value.length\n\n      inputNode.addEventListener('input', (event) => {\n        this._toggleInvalidClass(event.target.value.length, maxLimit)\n        counterValueNode.innerHTML = event.target.value.length\n      })\n    }\n\n    if (element.getAttribute('data-clear-option') === \"true\") {\n      const btnClearNode = element.querySelector('[data-btn=clear]')\n\n      inputNode.addEventListener('inputNode', () => {\n        if (inputNode.value.length > 0) {\n          btnClearNode.classList.remove('d-none')\n        } else {\n          btnClearNode.classList.add('d-none')\n        }\n      })\n      \n      btnClearNode.addEventListener('click', () => {\n        inputNode.value = \"\"\n        btnClearNode.classList.add('d-none')\n      })\n    }\n  }\n\n  _toggleInvalidClass(currentValueLength, maxLimit) {\n    if (currentValueLength > maxLimit) {\n      this.element.classList.add('is-invalid')\n    } else {\n      this.element.classList.remove('is-invalid')\n    }\n  }\n}\n\nexport default Control"]}